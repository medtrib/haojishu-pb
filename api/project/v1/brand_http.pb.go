// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.19.4
// source: project/v1/brand.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBrandCreateBrand = "/api.project.v1.Brand/CreateBrand"
const OperationBrandDeleteBrand = "/api.project.v1.Brand/DeleteBrand"
const OperationBrandGetBrand = "/api.project.v1.Brand/GetBrand"
const OperationBrandListBrand = "/api.project.v1.Brand/ListBrand"
const OperationBrandUpdateBrand = "/api.project.v1.Brand/UpdateBrand"

type BrandHTTPServer interface {
	CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandReply, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandReply, error)
	GetBrand(context.Context, *GetBrandRequest) (*GetBrandReply, error)
	ListBrand(context.Context, *ListBrandRequest) (*ListBrandReply, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandReply, error)
}

func RegisterBrandHTTPServer(s *http.Server, srv BrandHTTPServer) {
	r := s.Route("/")
	r.POST("/project/brand/v1/CreateBrand", _Brand_CreateBrand0_HTTP_Handler(srv))
	r.POST("/project/brand/v1/UpdateBrand", _Brand_UpdateBrand0_HTTP_Handler(srv))
	r.GET("/project/brand/v1/DeleteBrand/{id}", _Brand_DeleteBrand0_HTTP_Handler(srv))
	r.GET("/project/brand/v1/GetBrand/{id}", _Brand_GetBrand0_HTTP_Handler(srv))
	r.GET("/project/brand/v1/ListBrand", _Brand_ListBrand0_HTTP_Handler(srv))
}

func _Brand_CreateBrand0_HTTP_Handler(srv BrandHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandCreateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBrand(ctx, req.(*CreateBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBrandReply)
		return ctx.Result(200, reply)
	}
}

func _Brand_UpdateBrand0_HTTP_Handler(srv BrandHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandUpdateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBrand(ctx, req.(*UpdateBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBrandReply)
		return ctx.Result(200, reply)
	}
}

func _Brand_DeleteBrand0_HTTP_Handler(srv BrandHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandDeleteBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBrand(ctx, req.(*DeleteBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBrandReply)
		return ctx.Result(200, reply)
	}
}

func _Brand_GetBrand0_HTTP_Handler(srv BrandHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandGetBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBrand(ctx, req.(*GetBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBrandReply)
		return ctx.Result(200, reply)
	}
}

func _Brand_ListBrand0_HTTP_Handler(srv BrandHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandListBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBrand(ctx, req.(*ListBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBrandReply)
		return ctx.Result(200, reply)
	}
}

type BrandHTTPClient interface {
	CreateBrand(ctx context.Context, req *CreateBrandRequest, opts ...http.CallOption) (rsp *CreateBrandReply, err error)
	DeleteBrand(ctx context.Context, req *DeleteBrandRequest, opts ...http.CallOption) (rsp *DeleteBrandReply, err error)
	GetBrand(ctx context.Context, req *GetBrandRequest, opts ...http.CallOption) (rsp *GetBrandReply, err error)
	ListBrand(ctx context.Context, req *ListBrandRequest, opts ...http.CallOption) (rsp *ListBrandReply, err error)
	UpdateBrand(ctx context.Context, req *UpdateBrandRequest, opts ...http.CallOption) (rsp *UpdateBrandReply, err error)
}

type BrandHTTPClientImpl struct {
	cc *http.Client
}

func NewBrandHTTPClient(client *http.Client) BrandHTTPClient {
	return &BrandHTTPClientImpl{client}
}

func (c *BrandHTTPClientImpl) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...http.CallOption) (*CreateBrandReply, error) {
	var out CreateBrandReply
	pattern := "/project/brand/v1/CreateBrand"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBrandCreateBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandHTTPClientImpl) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...http.CallOption) (*DeleteBrandReply, error) {
	var out DeleteBrandReply
	pattern := "/project/brand/v1/DeleteBrand/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrandDeleteBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandHTTPClientImpl) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...http.CallOption) (*GetBrandReply, error) {
	var out GetBrandReply
	pattern := "/project/brand/v1/GetBrand/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrandGetBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandHTTPClientImpl) ListBrand(ctx context.Context, in *ListBrandRequest, opts ...http.CallOption) (*ListBrandReply, error) {
	var out ListBrandReply
	pattern := "/project/brand/v1/ListBrand"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrandListBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandHTTPClientImpl) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...http.CallOption) (*UpdateBrandReply, error) {
	var out UpdateBrandReply
	pattern := "/project/brand/v1/UpdateBrand"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBrandUpdateBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
