// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/common/v1/qiniu.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpTokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpTokenRequestMultiError,
// or nil if none found.
func (m *UpTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpTokenRequestMultiError(errors)
	}

	return nil
}

// UpTokenRequestMultiError is an error wrapping multiple validation errors
// returned by UpTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type UpTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpTokenRequestMultiError) AllErrors() []error { return m }

// UpTokenRequestValidationError is the validation error returned by
// UpTokenRequest.Validate if the designated constraints aren't met.
type UpTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpTokenRequestValidationError) ErrorName() string { return "UpTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpTokenRequestValidationError{}

// Validate checks the field values on UpTokenRequestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpTokenRequestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpTokenRequestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpTokenRequestReplyMultiError, or nil if none found.
func (m *UpTokenRequestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpTokenRequestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UpTokenRequestReplyMultiError(errors)
	}

	return nil
}

// UpTokenRequestReplyMultiError is an error wrapping multiple validation
// errors returned by UpTokenRequestReply.ValidateAll() if the designated
// constraints aren't met.
type UpTokenRequestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpTokenRequestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpTokenRequestReplyMultiError) AllErrors() []error { return m }

// UpTokenRequestReplyValidationError is the validation error returned by
// UpTokenRequestReply.Validate if the designated constraints aren't met.
type UpTokenRequestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpTokenRequestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpTokenRequestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpTokenRequestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpTokenRequestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpTokenRequestReplyValidationError) ErrorName() string {
	return "UpTokenRequestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpTokenRequestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpTokenRequestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpTokenRequestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpTokenRequestReplyValidationError{}

// Validate checks the field values on UploadFileBaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadFileBaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileBaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileBaseRequestMultiError, or nil if none found.
func (m *UploadFileBaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileBaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	// no validation rules for Path

	if len(errors) > 0 {
		return UploadFileBaseRequestMultiError(errors)
	}

	return nil
}

// UploadFileBaseRequestMultiError is an error wrapping multiple validation
// errors returned by UploadFileBaseRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadFileBaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileBaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileBaseRequestMultiError) AllErrors() []error { return m }

// UploadFileBaseRequestValidationError is the validation error returned by
// UploadFileBaseRequest.Validate if the designated constraints aren't met.
type UploadFileBaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileBaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileBaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileBaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileBaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileBaseRequestValidationError) ErrorName() string {
	return "UploadFileBaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileBaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileBaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileBaseRequestValidationError{}

// Validate checks the field values on UploadFileBaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadFileBaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileBaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileBaseReplyMultiError, or nil if none found.
func (m *UploadFileBaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileBaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	if len(errors) > 0 {
		return UploadFileBaseReplyMultiError(errors)
	}

	return nil
}

// UploadFileBaseReplyMultiError is an error wrapping multiple validation
// errors returned by UploadFileBaseReply.ValidateAll() if the designated
// constraints aren't met.
type UploadFileBaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileBaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileBaseReplyMultiError) AllErrors() []error { return m }

// UploadFileBaseReplyValidationError is the validation error returned by
// UploadFileBaseReply.Validate if the designated constraints aren't met.
type UploadFileBaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileBaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileBaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileBaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileBaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileBaseReplyValidationError) ErrorName() string {
	return "UploadFileBaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileBaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileBaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileBaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileBaseReplyValidationError{}
