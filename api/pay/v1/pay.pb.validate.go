// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/pay/v1/pay.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRequestMultiError, or nil if none found.
func (m *CreatePayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderPrefix

	// no validation rules for Email

	// no validation rules for Country

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ReturnUrl

	if all {
		switch v := interface{}(m.GetPay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePayRequestValidationError{
					field:  "Pay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePayRequestValidationError{
					field:  "Pay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePayRequestValidationError{
				field:  "Pay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePayRequestMultiError(errors)
	}

	return nil
}

// CreatePayRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePayRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRequestMultiError) AllErrors() []error { return m }

// CreatePayRequestValidationError is the validation error returned by
// CreatePayRequest.Validate if the designated constraints aren't met.
type CreatePayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRequestValidationError) ErrorName() string { return "CreatePayRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRequestValidationError{}

// Validate checks the field values on PayOption with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOption with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayOptionMultiError, or nil
// if none found.
func (m *PayOption) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Parameter

	for idx, item := range m.GetShop() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PayOptionValidationError{
						field:  fmt.Sprintf("Shop[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PayOptionValidationError{
						field:  fmt.Sprintf("Shop[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PayOptionValidationError{
					field:  fmt.Sprintf("Shop[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Description

	if len(errors) > 0 {
		return PayOptionMultiError(errors)
	}

	return nil
}

// PayOptionMultiError is an error wrapping multiple validation errors returned
// by PayOption.ValidateAll() if the designated constraints aren't met.
type PayOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOptionMultiError) AllErrors() []error { return m }

// PayOptionValidationError is the validation error returned by
// PayOption.Validate if the designated constraints aren't met.
type PayOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOptionValidationError) ErrorName() string { return "PayOptionValidationError" }

// Error satisfies the builtin error interface
func (e PayOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOptionValidationError{}

// Validate checks the field values on Shop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Shop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShopMultiError, or nil if none found.
func (m *Shop) ValidateAll() error {
	return m.validate(true)
}

func (m *Shop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for Num

	// no validation rules for Currency

	if len(errors) > 0 {
		return ShopMultiError(errors)
	}

	return nil
}

// ShopMultiError is an error wrapping multiple validation errors returned by
// Shop.ValidateAll() if the designated constraints aren't met.
type ShopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopMultiError) AllErrors() []error { return m }

// ShopValidationError is the validation error returned by Shop.Validate if the
// designated constraints aren't met.
type ShopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopValidationError) ErrorName() string { return "ShopValidationError" }

// Error satisfies the builtin error interface
func (e ShopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopValidationError{}

// Validate checks the field values on CreatePayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreatePayReplyMultiError,
// or nil if none found.
func (m *CreatePayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Url

	if len(errors) > 0 {
		return CreatePayReplyMultiError(errors)
	}

	return nil
}

// CreatePayReplyMultiError is an error wrapping multiple validation errors
// returned by CreatePayReply.ValidateAll() if the designated constraints
// aren't met.
type CreatePayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayReplyMultiError) AllErrors() []error { return m }

// CreatePayReplyValidationError is the validation error returned by
// CreatePayReply.Validate if the designated constraints aren't met.
type CreatePayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayReplyValidationError) ErrorName() string { return "CreatePayReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayReplyValidationError{}

// Validate checks the field values on GetPayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPayRequestMultiError, or
// nil if none found.
func (m *GetPayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPayRequestMultiError(errors)
	}

	return nil
}

// GetPayRequestMultiError is an error wrapping multiple validation errors
// returned by GetPayRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayRequestMultiError) AllErrors() []error { return m }

// GetPayRequestValidationError is the validation error returned by
// GetPayRequest.Validate if the designated constraints aren't met.
type GetPayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayRequestValidationError) ErrorName() string { return "GetPayRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayRequestValidationError{}

// Validate checks the field values on GetPayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPayReplyMultiError, or
// nil if none found.
func (m *GetPayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPayReplyMultiError(errors)
	}

	return nil
}

// GetPayReplyMultiError is an error wrapping multiple validation errors
// returned by GetPayReply.ValidateAll() if the designated constraints aren't met.
type GetPayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayReplyMultiError) AllErrors() []error { return m }

// GetPayReplyValidationError is the validation error returned by
// GetPayReply.Validate if the designated constraints aren't met.
type GetPayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayReplyValidationError) ErrorName() string { return "GetPayReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayReplyValidationError{}
