// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: upload/v1/qiniu.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QiNiu_UpToken_FullMethodName        = "/api.upload.v1.QiNiu/UpToken"
	QiNiu_UploadFileBase_FullMethodName = "/api.upload.v1.QiNiu/UploadFileBase"
)

// QiNiuClient is the client API for QiNiu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QiNiuClient interface {
	UpToken(ctx context.Context, in *UpTokenRequest, opts ...grpc.CallOption) (*UpTokenRequestReply, error)
	UploadFileBase(ctx context.Context, in *UploadFileBaseRequest, opts ...grpc.CallOption) (*UploadFileBaseReply, error)
}

type qiNiuClient struct {
	cc grpc.ClientConnInterface
}

func NewQiNiuClient(cc grpc.ClientConnInterface) QiNiuClient {
	return &qiNiuClient{cc}
}

func (c *qiNiuClient) UpToken(ctx context.Context, in *UpTokenRequest, opts ...grpc.CallOption) (*UpTokenRequestReply, error) {
	out := new(UpTokenRequestReply)
	err := c.cc.Invoke(ctx, QiNiu_UpToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qiNiuClient) UploadFileBase(ctx context.Context, in *UploadFileBaseRequest, opts ...grpc.CallOption) (*UploadFileBaseReply, error) {
	out := new(UploadFileBaseReply)
	err := c.cc.Invoke(ctx, QiNiu_UploadFileBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QiNiuServer is the server API for QiNiu service.
// All implementations must embed UnimplementedQiNiuServer
// for forward compatibility
type QiNiuServer interface {
	UpToken(context.Context, *UpTokenRequest) (*UpTokenRequestReply, error)
	UploadFileBase(context.Context, *UploadFileBaseRequest) (*UploadFileBaseReply, error)
	mustEmbedUnimplementedQiNiuServer()
}

// UnimplementedQiNiuServer must be embedded to have forward compatible implementations.
type UnimplementedQiNiuServer struct {
}

func (UnimplementedQiNiuServer) UpToken(context.Context, *UpTokenRequest) (*UpTokenRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpToken not implemented")
}
func (UnimplementedQiNiuServer) UploadFileBase(context.Context, *UploadFileBaseRequest) (*UploadFileBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileBase not implemented")
}
func (UnimplementedQiNiuServer) mustEmbedUnimplementedQiNiuServer() {}

// UnsafeQiNiuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QiNiuServer will
// result in compilation errors.
type UnsafeQiNiuServer interface {
	mustEmbedUnimplementedQiNiuServer()
}

func RegisterQiNiuServer(s grpc.ServiceRegistrar, srv QiNiuServer) {
	s.RegisterService(&QiNiu_ServiceDesc, srv)
}

func _QiNiu_UpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiNiuServer).UpToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QiNiu_UpToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiNiuServer).UpToken(ctx, req.(*UpTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QiNiu_UploadFileBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiNiuServer).UploadFileBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QiNiu_UploadFileBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiNiuServer).UploadFileBase(ctx, req.(*UploadFileBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QiNiu_ServiceDesc is the grpc.ServiceDesc for QiNiu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QiNiu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.upload.v1.QiNiu",
	HandlerType: (*QiNiuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpToken",
			Handler:    _QiNiu_UpToken_Handler,
		},
		{
			MethodName: "UploadFileBase",
			Handler:    _QiNiu_UploadFileBase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload/v1/qiniu.proto",
}
