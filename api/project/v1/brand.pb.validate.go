// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/project/v1/brand.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandRequestMultiError, or nil if none found.
func (m *CreateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectBrandName

	// no validation rules for ProjectBrandFirstLetter

	// no validation rules for ProjectBrandSort

	// no validation rules for ProjectBrandFactoryStatus

	// no validation rules for ProjectBrandShowStatus

	// no validation rules for ProjectBrandLogo

	// no validation rules for ProjectBrandBigPic

	// no validation rules for ProjectBrandBrandInfo

	if len(errors) > 0 {
		return CreateBrandRequestMultiError(errors)
	}

	return nil
}

// CreateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandRequestMultiError) AllErrors() []error { return m }

// CreateBrandRequestValidationError is the validation error returned by
// CreateBrandRequest.Validate if the designated constraints aren't met.
type CreateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandRequestValidationError) ErrorName() string {
	return "CreateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandRequestValidationError{}

// Validate checks the field values on CreateBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandReplyMultiError, or nil if none found.
func (m *CreateBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBrandReplyMultiError(errors)
	}

	return nil
}

// CreateBrandReplyMultiError is an error wrapping multiple validation errors
// returned by CreateBrandReply.ValidateAll() if the designated constraints
// aren't met.
type CreateBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandReplyMultiError) AllErrors() []error { return m }

// CreateBrandReplyValidationError is the validation error returned by
// CreateBrandReply.Validate if the designated constraints aren't met.
type CreateBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandReplyValidationError) ErrorName() string { return "CreateBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandReplyValidationError{}

// Validate checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBrandRequestMultiError, or nil if none found.
func (m *UpdateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBrandRequestMultiError(errors)
	}

	return nil
}

// UpdateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandRequestMultiError) AllErrors() []error { return m }

// UpdateBrandRequestValidationError is the validation error returned by
// UpdateBrandRequest.Validate if the designated constraints aren't met.
type UpdateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandRequestValidationError) ErrorName() string {
	return "UpdateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandRequestValidationError{}

// Validate checks the field values on UpdateBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrandReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBrandReplyMultiError, or nil if none found.
func (m *UpdateBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBrandReplyMultiError(errors)
	}

	return nil
}

// UpdateBrandReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateBrandReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandReplyMultiError) AllErrors() []error { return m }

// UpdateBrandReplyValidationError is the validation error returned by
// UpdateBrandReply.Validate if the designated constraints aren't met.
type UpdateBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandReplyValidationError) ErrorName() string { return "UpdateBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandReplyValidationError{}

// Validate checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandRequestMultiError, or nil if none found.
func (m *DeleteBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBrandRequestMultiError(errors)
	}

	return nil
}

// DeleteBrandRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandRequestMultiError) AllErrors() []error { return m }

// DeleteBrandRequestValidationError is the validation error returned by
// DeleteBrandRequest.Validate if the designated constraints aren't met.
type DeleteBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandRequestValidationError) ErrorName() string {
	return "DeleteBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandRequestValidationError{}

// Validate checks the field values on DeleteBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandReplyMultiError, or nil if none found.
func (m *DeleteBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBrandReplyMultiError(errors)
	}

	return nil
}

// DeleteBrandReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandReplyMultiError) AllErrors() []error { return m }

// DeleteBrandReplyValidationError is the validation error returned by
// DeleteBrandReply.Validate if the designated constraints aren't met.
type DeleteBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandReplyValidationError) ErrorName() string { return "DeleteBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandReplyValidationError{}

// Validate checks the field values on GetBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandRequestMultiError, or nil if none found.
func (m *GetBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBrandRequestMultiError(errors)
	}

	return nil
}

// GetBrandRequestMultiError is an error wrapping multiple validation errors
// returned by GetBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandRequestMultiError) AllErrors() []error { return m }

// GetBrandRequestValidationError is the validation error returned by
// GetBrandRequest.Validate if the designated constraints aren't met.
type GetBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandRequestValidationError) ErrorName() string { return "GetBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandRequestValidationError{}

// Validate checks the field values on GetBrandReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBrandReplyMultiError, or
// nil if none found.
func (m *GetBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBrandReplyMultiError(errors)
	}

	return nil
}

// GetBrandReplyMultiError is an error wrapping multiple validation errors
// returned by GetBrandReply.ValidateAll() if the designated constraints
// aren't met.
type GetBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandReplyMultiError) AllErrors() []error { return m }

// GetBrandReplyValidationError is the validation error returned by
// GetBrandReply.Validate if the designated constraints aren't met.
type GetBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandReplyValidationError) ErrorName() string { return "GetBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandReplyValidationError{}

// Validate checks the field values on ListBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBrandRequestMultiError, or nil if none found.
func (m *ListBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBrandRequestMultiError(errors)
	}

	return nil
}

// ListBrandRequestMultiError is an error wrapping multiple validation errors
// returned by ListBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrandRequestMultiError) AllErrors() []error { return m }

// ListBrandRequestValidationError is the validation error returned by
// ListBrandRequest.Validate if the designated constraints aren't met.
type ListBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandRequestValidationError) ErrorName() string { return "ListBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandRequestValidationError{}

// Validate checks the field values on ListBrandReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBrandReplyMultiError,
// or nil if none found.
func (m *ListBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBrandReplyMultiError(errors)
	}

	return nil
}

// ListBrandReplyMultiError is an error wrapping multiple validation errors
// returned by ListBrandReply.ValidateAll() if the designated constraints
// aren't met.
type ListBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrandReplyMultiError) AllErrors() []error { return m }

// ListBrandReplyValidationError is the validation error returned by
// ListBrandReply.Validate if the designated constraints aren't met.
type ListBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandReplyValidationError) ErrorName() string { return "ListBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandReplyValidationError{}
